#include "Warrior.h"
#include "Die.h"
#include "StateHandler.h"
bool Warrior::DamageRoll(BaseCharacter *targetent)
{

  int dmgdone=Die::Roll(this->getCombatStats()->getDamage(),1);
  int strbonus=(getCurrentAttributes()->getStr()-10)/2;
  if(strbonus>0)
    dmgdone+=strbonus;
  if(getGeneralStats()->getLevel()>=5)
    {
      dmgdone+=Die::Roll(8,1);
    }
  targetent->getGeneralStats()->SetHp(targetent->getGeneralStats()->getHp()-dmgdone);
  cout<<"Warrior Doing "<<dmgdone<<" to "<<targetent->getInfo()->getName()<<" Hp remaining:"<<targetent->getGeneralStats()->getHp()<<endl; 
  
}
bool Warrior::AttackRoll(BaseCharacter *targetent)
{
  int d20roll=Die::Roll(20,1)+Die::Roll(4,1);
  cout<<"Testing Tohit:"<<d20roll+this->getCombatStats()->getTohitBonus()<<" vs "<<targetent->getCombatStats()->getArmorClass()<<endl;
  if(d20roll+this->getCombatStats()->getTohitBonus()>=targetent->getCombatStats()->getArmorClass())
    return true;
  return false;
}
bool Warrior::Cleave(BaseCharacter *ent)
{
    cout<<"target:"<<ent->getInfo()->getName()<<endl;
    if(getID() != ent->getID() && (mainHand!= NULL))
    {

      SetTarget(ent);
      int dist=abs(ent->getPosition().x-this->getPosition().x)/TILE_SIZE+abs(ent->getPosition().y-this->getPosition().y)/TILE_SIZE;
      if(mainHand->getInfo()->getRange() >=  dist)
        {
	  //ABILITY STATE
	  stateHandler->SetState(CLEAVE_S);
	  SetUpAttackAnimation(ent);
	  
	  if(mainHand->getInfo()->getRange()>1)
            {
	      if(projectile)
		delete projectile;
	      projectile=new Projectile(ammo->getEntity(),GetTarget()->GetBaseEntity()->getRect(),10);
	      projectile->Place(GetBaseEntity()->getPosition(),dir);
	      projectile->SetUp();
	      projectile->Reset();

            }
	  return true;
        }
    }
  return false;
  
  
}
bool Warrior::Reaction(BaseCharacter *ent)
{
   if(getID() != ent->getID() && (mainHand!= NULL))
    {

      SetTarget(ent);
      int dist=abs(ent->getPosition().x-this->getPosition().x)/TILE_SIZE+abs(ent->getPosition().y-this->getPosition().y)/TILE_SIZE;
      if(mainHand->getInfo()->getRange() >=  dist)
        {
	  //ABILITY STATE
	  stateHandler->SetState(REACTION_S);
	  SetUpAttackAnimation(ent);
	  SetReactionDone(false);
	  
	  if(mainHand->getInfo()->getRange()>1)
            {
	      if(projectile)
		delete projectile;
	      projectile=new Projectile(ammo->getEntity(),GetTarget()->GetBaseEntity()->getRect(),10);
	      projectile->Place(GetBaseEntity()->getPosition(),dir);
	      projectile->SetUp();
	      projectile->Reset();

            }
	  return true;
        }
    }
  return false;
}
