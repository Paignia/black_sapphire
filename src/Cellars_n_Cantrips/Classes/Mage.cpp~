#include "Mage.h"


Mage::Mage(AnimatedEntity *base,Info *myinfo, Attributes *BaseAttributes,GeneralStats *generalStats,CombatStats *combatStats):
  BaseCharacter(base,myinfo,BaseAttributes,generalStats,combatStats)
{
  the_spell=NULL;
}

void Mage::Update(float t)
{
  BaseCharacter::Update(t);
  if(the_spell)
    the_spell->Update(t);
  
}

void Mage::Draw(SDL_Surface *screen)
{
  BaseCharacter::Draw(screen);

  if(the_spell)
    the_spell->Draw(screen);

}


bool Mage::LearnSpell(Spell *the_spell)
{
  cout<<"Learning:"<<the_spell->GetSpellInfo()->getName()<<endl;
  if(the_spell->GetSpellInfo()->getClass().compare("Mage")==0)
    {
      SpellBook[the_spell->GetSpellInfo()->getName()]=the_spell;
      the_spell->SetCaster(this);
  return true;
    }
  cout<<"Failed to learn:"<<the_spell->GetSpellInfo()->getName()<<endl;
  return false;
}

Spell* Mage::GetSpell()
{
  return the_spell;
}
  
void Mage::CastSpell(string spellName,pair<int,int> target)
{

  //Search for the spell in the spellbook
  //if it exists cast it
  unordered_map<string,Spell*>::iterator it=SpellBook.begin();
  if(SpellBook.find(spellName)!=SpellBook.end())
    {
      the_spell=SpellBook[spellName];
      SpellBook[spellName]->GetSpellStats()->SetTarget(target);
      
      SetCastAnimation(target);
      stateHandler->SetState(CAST_S);
    }
  else
    {
      cout<<"SpellBook Contains:"<<endl;
      for(it;it!=SpellBook.end();++it)
	{
	  cout<<it->first<<"endl";
	}
      
      cout<<spellName<<" not found"<<endl;
    }
  

}


void Mage::SetCastAnimation(pair<int,int> pos)
{


	      int x=this->getPosition().x-pos.first;
	      int y=this->getPosition().y-pos.second;
	      if(abs(x)>abs(y))
                {
		  if(x>0)
                    {
		      SetDirection(LEFT);
		      SetAnimation(CAST_L);
                    }
		  else
                    {
		      SetDirection(RIGHT);
		      SetAnimation(CAST_R);
                    }
                }
	      else
                {
		  if(y>0)
                    {
		      SetDirection(UP);
		      SetAnimation(CAST_U);
                    }
		  else
                    {
		      SetDirection(DOWN);
		      SetAnimation(CAST_D);
                    }

                }

}

